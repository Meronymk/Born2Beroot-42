✿———————————————————✦————————————————————————————————✦———————————————————✿
๑‿︵‿୨					DÉFENSE BORN_2_BE_ROOT						୧‿︵‿๑
˖๑‧˚꒷꒦︶︶₊꒷꒦︶︶₊꒷꒦︶︶₊꒷꒦˚₊︶꒷₊꒷꒦˚︶₊꒷꒦˚‧๑˖˖๑‧˚꒷꒦︶︶₊꒷꒦︶︶₊꒷︶꒷₊꒷꒦˚︶₊꒷꒦˚‧๑˖

//ncomplicated Fire Wall//
UFW :		sudo ufw allow <program name>
			sudo ufw allow <port number>
			sudo ufw status numbered
			sudo ufw delete <rule number>

//Secure Shell//
SSH	:		systemctl status ssh
			sudo service ssh status
			/etc/ssh/sshd_config (nano)
			ssh <user>@127.0.0.1 -p 4242

//Super User/Substitute user do//
SUDO:		su
			sudo visudo

USER:		sudo adduser <user>

PASSWORD:	chage -l <user>
			sudo passwd <user>
			/etc/pam.d/common-password (nano)

//aG = add Group  getent = get entry//
GROUPS:		getent group "group name"
			groups <user>
			sudo groupadd <group name>
			sudo usermod -aG "group" <user>

SYSTEM:		sudo systemctl restart "service"
			uname -a
			hostname
			sudo hostnamectl set_hostname <new name>
			/etc/hosts   ---> edit 127.0.0.1 <old hostname> (nano)
			lsblk
			free -m
			df -Bg
			ss
			cat /proc/stat
			lscpu
			sudo crontab -e -u root
			apt-get update	
			apt-get upgrade

◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥

1. Comment fonctionne une Machine virtuelle
	◊	On peu créer une partition virtuel en utilisant l'information
		physique de la machine sur laquel on peu y installer un OS.
		On peu lui donner une partie de la puissance de la machine
		ou même créer des partitions supplémentaire.

2. Pourquoi avoir choisi CentOs ou Debian
	◊	CentOs est un produit payant de Red hat qui offre une
		stabilité dans ses mises à jours et son service de soutient.
		C'est souvent utiliser par les grandes entreprises.
		Debian est un open source (gratuit), qui lui, supporte plusieurs
		architectures et qui a une communauté d'utilisateurs/développeurs
		active.
		donc on choisi Debian pour son accès gratuit et ses avantages.

3. La principal différence entre CentOs et Debian
	◊	CentOs a un support commercial de 10 ans, des mise à jours
		sur des cycles basés sur le même cycle que Linux, une vitesse
		supérieure puisqu'il utilise ses programmes fiables et testés
		dans leur environnement. 

		Debian lui est mis à jour régulierement, donc demande plus
		d'attention mais est parfait pour le développement puisque
		ces mise à jour sont plus fréquente et ammélioré par une
		communauté active et proche des nouvelles technologies.

4. Le but de la Machine Virtuelle
	◊	Pouvoir tester des logiciels en conception dans un
		environement fermé et diagnostiquer les problèmes sans
		toucher notre OS principal. On peu aussi séparer la puissance
		d'une machine pour plusieurs serveurs sur des architectures
		différentes sur les éléments physiques disponibles.

5. Différence entre APT et Aptitude
	◊	Les deux sont des gestionnaires de "packages" mais Aptitude
		est une amélioration de apt avec un menu textuel/visuel et
		plusieurs commandes supplémentaires.

6. Qu'est ce que APPArmor
	◊	C'est un logiciel de sécurité qui associe un profil de
		sécurité (comme un groupe) à chaque programme qui peu
		restreindre les accès au OS ou d'autres programmes.
		Il utilise les chemin d'accès(directory path) pour
		authoriser ou refuser l'accès.

7. Vérifier si le script affiche le message au 10 minutes
	◊	Attendre 10 minutes. C'est ça. C'est long.

8. Se connecter avec un User qui ne doit pas être root
	◊	l'utilisateur créer n'est pas root.

9. Le mot de passe doit correspondre au règles demandé
	◊	/etc/pam.d/common-password (nano)

10. Afficher le status UFW
	◊	sudo ufw status numbered

11. Afficher le status SSH
	◊	systemctl status ssh

12. Afficher la disro linux
	◊	uname -a

13. Afficher si un utilisateur avec notre login est présent sur
	la machine et qu'il appartient au groupe sudo et user42
	◊	groups <user>

14. Vérifier si le mot de passe de cette utilisateur est 
	conforme au règle aussi
	◊	chage -l <user>

15. Créé un nouvelle utilisateur et choisir un mot de passe
	celon les regles en place.
	◊	sudo adduser <user>

16. Expliquer comment on peut changer les règles de mot de passe
	◊	/etc/pam.d/common-password (nano)

17. Créé un nouveau groupe nommé "evaluating" et ajouter le
	nouvel utilisateur et vérifier si il est présent
	◊	sudo addgroup evaluating
	◊	sudo usermod -aG evaluating <user>
	◊	getent group evaluating

18. Afficher le hostname qui est ""user"42
	◊	hostname

19. Changer le hostname, redémarrer, vérifier a nouveau, si tous
	fonctionne on change a nouveau pour "user"42 et on redémarre
	◊	sudo hostnamectl set_hostname <new name>
	◊	/etc/hosts   ---> edit 127.0.0.1 <old hostname> (nano)

20. Afficher les partitions
	◊	lsblk

21. Qu'est ce que LVM et quel est sont utilité.
	◊	LVM est un logiciel de gestion de l'utilisation des 
		espaces de stockage d'un ordinateur. Il permet de gérer,
		sécuriser et optimiser de manière souple les espaces de
		stockage en ligne dans les systèmes d'exploitation de type UNIX.
		comme des partitions /swap,/root,/home,/srv,/tmp,/var etc.

22. Véfifier si SUDO est installé
	◊	sudo

23. Ajouter le nouvelle utilisateur dans le groupe SUDO
	◊	sudo usermod -aG sudo <user>

24. Qu'est ce que SUDO et son utilité.
	◊	Un programme qui donne les droits d'un utilisateur
		à un autre utilisateur.

25. Faire un exemple d'utilisation de sudo 
	◊	sudo install <nom du package>

26. Véfifier que /var/log/sudo existe avec un fichier a l'intérieur
	◊	cd /var/log/sudo
	◊	ls -la

27. Vérifier que les commandes sudo sont présente
	◊	sudo

28. Qu'est ce que UFW et sont utilité
	◊	Un outil de configuration de port. il permet d'ouvrir et
		de fermer des ports.

29. Afficher les régles de UFW
	◊	sudo ufw status numbered

30. Ajouter une règle pour ouvrir le port 8080
	◊	sudo ufw allow 8080

31. Vérifier si la règle est active
	◊	sudo ufw status numbered

32. Supprimer la règle 8080
	◊	sudo ufw delete <rule number>

34. Qu'est ce que SSH et son utilité
	◊	ssh permet une connexion d'une machine distante via
		une liaison sécurisée dans le but de tranférer des fichiers
		ou utiliser des commandes.

35. Afficher le status SSH sur le port 4242 seulement
	◊	sudo service ssh status

36. Se connecter depuis le Mac sur la machine virtuelle a 
l'aide de SSH
	◊	ssh krochefo@127.0.0.1 -p 4242

37. On ne doit pas pouvoir se connecter avec l'utilisateur ROOT
	◊	ssh root@127.0.0.1 -p 4242

38. Qu'est ce que CRON
	◊	Cron est une horloge système qui peu prendre des lignes
		de commande selon la période demandé en respectant
		la syntaxe de crontab.

39. Comment fonctionne le script
	◊	lscpu = info sur les processeurs
	◊	free -m = affiche les infos memmoire (-m en megaoctets)
	◊	df -Bg = affiche espace disponible sur les disques
	◊	ss = analyse les sockets pour le reseau
	◊	cat /proc/stat = fichier de statistic du processeur

	◊	grep = retourne les lignes avec un mots choisi
	◊	awk = transforme les lignes en mot ou $1 est le premier mot, $2 est le deuxieme etc.
	◊	echo = imprime a l'écran le message
	◊	wc = word count du fichier -l (lines) -w (words) -c (characters)

				arc=$(uname -a)
				physical_CPU=$(lscpu | grep 'Socket' | awk '{n_cpu += $2} END {print n_cpu}')
				logical_CPU=$(lscpu | grep 'CPU(s)' | awk '{n_vcpu += $2} END {print n_vcpu}')
				CPU_load=$(cat /proc/stat | grep 'cpu' | awk '{LOAD=($2+$4)*100/($2+$4+$5)} END {printf("%0.1f"), LOAD}')
				sys_memory=$(free -m | awk 'NR==2 {print $2}')
				memory_usage=$(free -m | awk 'NR==2 {print $3}')
				memory_usage_p=$(free -m | awk 'NR==2 {printf("%.2f"), $3/$2*100}')
				disk_on_sys=$(df -Bg | grep '^/dev/' | grep -v '/boot$' | awk '{t_disk += $2} END {print t_disk}')
				disk_usage=$(df -Bg | grep '^/dev/' | grep -v '/boot$' | awk '{u_disk += $3} END {print u_disk}')
				disk_usage_p=$(df -Bg | grep '^/dev/' | grep -v 'boot$' | awk '{t_disk += $2} {u_disk += $3} END {printf("%d"), (u_disk/t_disk)*100}')
				last_reboot=$(who -b | awk '{NR==1} END {print $3" "$4}')
				lvm_status=$(if [ $(lsblk | cut -f6 | grep 'lvm' | wc -l) -eq 0 ]; then echo no; else echo yes; fi) 
				connexion_tcp=$(ss -t | grep 'ESTAB' | wc -l)
				active_user=$(who | wc -l)
				ip_addr=$(hostname -I)
				mac_addr=$(ip link show | awk '{$1 == "link/ether"} END {print $2}')  
				sudo_count=$(cat /var/log/sudo/log | grep 'COMMAND' | wc -l)

				echo -e "Architecture: ${arc}"
				echo -e "CPU physical : ${physical_CPU}" 
				echo -e "vCPU : ${logical_CPU}"
				echo -e "Memory Usage: ${memory_usage}/${sys_memory}MB (${memory_usage_p}%)"
				echo -e "Disk Usage: ${disk_usage}/${disk_on_sys}Gb (${disk_usage_p}%)"
				echo -e "CPU Load: ${CPU_load}%"
				echo -e "Last boot: ${last_reboot}"
				echo -e "LMV use: ${lvm_status}"
				echo -e "Connexions TCP : ${connexion_tcp} ESTABLISHED"
				echo -e "User log: ${active_user}"
				echo -e "Network: IP ${ip_addr}(${mac_addr})"
				echo -e "Sudo ${sudo_count} cmd"

39. Comment le faire démarrer au 10 minutes
	◊	sudo crontab -e -u root
				*/10 * * * * bash /root/sleep.sh && bash /root/monitoring.sh

	◊	le script */10 = at every 10 minutes of (*)every hour of
		(*)every day of the month of (*)every month of (*)every days of week.
		suivit d'une commande bash pour faire le délais et afficher le script.

	◊	ajouter le temp avec la sytaxe de crontab et le script
		ne pas oublier le wall pour l'affichage.

				BOOT_MIN=$(uptime -s | cut -d ":" -f 2)
				BOOT_SEC=$(uptime -s | cut -d ":" -f 3)
				DELAY=$(bc <<< $BOOT_MIN%10*60+$BOOT_SEC)
				sleep $DELAY

	◊	le script capture les minutes et les secondes depuis le boot.
		il fait un délai suite aux 10 minutes de l'heure du crontab puis
		rajoute les minutes/secondes acquis.

40. Retirer la règle de démarrer au Startup puis redémarer la
	machine. Le script doit toujours être présent sur la machine
	mais n'a pas démarrer.
	◊	sudo service cron stip

◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥
              _
  __   ___.--'_`.
 ( _`.'. -   'o` ) PAS DE BONUS
 _\.'_'      _.-'
( \`. )    //\`
 \_`-'`---'\\__,
  \`        `-\
   `												Krochefo	Quebec42
◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥◤◢◣◥
